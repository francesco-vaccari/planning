PROBLEM1
Assumptions about problem1:
- a robot at a location has access to all workstations without needing to move further
- a robot can unload the content of a box if it  is in the same location of the workstation, since the robot can access all workstations of that location
- unloading a box simply empties the box, leaving the content of the box at the given workstation and having still after the robot carrying an emtpy box
- boxes can be dropped by the robot at any location but not in workstations
- contents can only be dropped at workstations, and are found initially in the central_warehouse
- the central_warehouse is both a location and a workstation, has initially all boxes and all contents
- the robot can empty a box that is carrying, moving the content from the box to a workstation in the location it is in

I think it is better if i can implement the contents in a way that when a robot picks stuff up from the central_warehouse the stuff is not removed, and is like duplicated. This way the components are inifinite but i have to be careful because i still need them to disappear from ground if they are picked from any other workstation. To solve this problem, i might solve this problem by creating a special action that allows the robot to fill_up_at_cw and maybe also remove the central_warehouse_workstation so that the formulation is simpler by allowing the contents to be at a location when that location is only the central_warehouse.

Regarding problem1, I can also add a pud_down_content_at_cw action that basically acts as bin for the contents that the robot has that are not needed anymore. This is not really needed since the goal do not require this action and it would never be actually performed. Still might be a good idea to add it.

Boxes instead are in a limited number and for each of them there is an instance initialized at central_warehouse. Boxes can only be dropped in locations, and not in workstations, which means that the action of unloading a box can be performed by a robot by simply being in the same locatino of the workstation and emptying the box. Robots can choose to also drop boxes at locations, but they nevet do because it is not optimal.

The way I modeled the contents of boxes, it is easy to add new kinds of componenents, like 'parts' in the problem defined. Also it is possible to add other robots that can pick up other boxes. Altough this produces a much longer plan searching time if we use astar to find the optimal plan. Observation about plans found, since we don't need boxes to be returned to the central_warehouse, the longest delivery is always performed last.


PROBLEM2
Assumptions about problem2:
- there are different kind of robots, the basic one which walks and can move obly between adjacent locations, and drones that can fly between arbitrary locations, maybe also some kind of jumping robot that can move by 2 locations at a time (walker, drone, jumper)
- carriers can be dropped at locations and not at workstations
- to load content to boxes the box has to be loaded in a carrier and the carrier must be attached, to load a box to a carrier the carrier must be attached and must have capacity available
- the carriers have a maximum capacity, up to 10 boxes
- a robot can have only one carrier attached at a time
- like before, contents are available with infinite restock at the central_warehouse

For the different kind of robots, I am planning to give the drone the highest cost for moving, the jumping robot should have less than double the cost of the walking robot so that it makes sense. I think this creates an interesting solution in cetrain environments, especially because the jumper cannot reach all the states, but only those with an even distance to the central_warehouse.

Because of the problem of the fluents/numeric-fluents not being implemented I had to change the way the max capacity for carriers is handled, the solution this way is far from clean and pretty meh but it works.

Interesting about the solution, only the drone makes actions, since it is the fastest way to move and since it spends the action to attach the carrier, any other robot starting from the central_warehouse would take the same amount of time to reach any new destination because it needs to attach the carrier before. Also, the drone attaches the carrier with capacity two in order to make only one trip to deliver the contents to the two workstations in location 2.

TODO: implement with fluents as an alternative, still the current solution is fine because they are not supported in panda


PROBLEM3
In general, the tasks allow only to specify the robot that does the action objects directly related to what we want the robot to do.

Tasks:
- move to location (move ?r- robot ?l - location)
    - if already at the location then done
    - if walker and 1 step away then move there
    - if walker and more than 1 step away the move to location and then call move again
    - if drone then fly to location
    - if jumper and 1 step away (2 locations) then move there
    - if jumper and more than 1 step away then move to location and then call move again

- get a carrier (get_carrier ?r - robot ?car - carrier)
    To obtain a specific carrier the robot can:
    - if carrier already attached then done
    - if another carrier attached then detach it and call the task
    - if carrier detached then move to location of carrier and attach it
    - if carrier attached to another robot then detach it and call the task

- get a box (get_box ?r - robot ?b - box)
    To obtain a specific box the robot can:
    - if box already loaded in carrier attached then done
    - if box not loaded:
        - if carrier attached and non-zero capacity then move to location and load the box
        - if no carrier attached then get carrier with non-zero capacity and call the task
        - if carrier attached and zero capacity then:
            - get a new carrier with non-zero capacity and call the task
            - or drop a box and call the task
    - if box loaded in carrier not attached to robot then:
        - get the carrier
        - or drop the box from that carrier and call the task

- get content (?r - robot ?con - content). We assume to not find content anywhere expecet in the central_warehouse, this makes sense because any optimal solution will not have content lying on the ground outside of the central_warehouse. For the same reason, we do not allow robots to drop content anywhere because an optimal solution will never require this action.
    To obtain a specific content:
    - if content in box loaded to carrier attached then done
    - if empty box then move to central_warehouse and pick up the content
    - (if no empty boxes then) get an empty box and call the task
    - if no carrier attached then get carrier and call the task
    - if content in box then get the box

- deliver content (?con - content ?w - workstation)
    - get content
    - move to location of workstation
    - put down content at workstation