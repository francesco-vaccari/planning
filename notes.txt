PROBLEM1
Assumptions about problem1:
- a robot at a location has access to all workstations without needing to move further
- a robot can unload the content of a box if it  is in the same location of the workstation, since the robot can access all workstations of that location
- unloading a box simply empties the box, leaving the content of the box at the given workstation and having still after the robot carrying an emtpy box
- boxes can be dropped by the robot at any location but not in workstations
- contents can only be dropped at workstations, and are found initially in the central_warehouse
- the central_warehouse is both a location and a workstation, has initially all boxes and all contents
- the robot can empty a box that is carrying, moving the content from the box to a workstation in the location it is in

I think it is better if i can implement the contents in a way that when a robot picks stuff up from the central_warehouse the stuff is not removed, and is like duplicated. This way the components are inifinite but i have to be careful because i still need them to disappear from ground if they are picked from any other workstation. To solve this problem, i might solve this problem by creating a special action that allows the robot to fill_up_at_cw and maybe also remove the central_warehouse_workstation so that the formulation is simpler by allowing the contents to be at a location when that location is only the central_warehouse.

Regarding problem1, I can also add a pud_down_content_at_cw action that basically acts as bin for the contents that the robot has that are not needed anymore. This is not really needed since the goal do not require this action and it would never be actually performed. Still might be a good idea to add it.

Boxes instead are in a limited number and for each of them there is an instance initialized at central_warehouse. Boxes can only be dropped in locations, and not in workstations, which means that the action of unloading a box can be performed by a robot by simply being in the same locatino of the workstation and emptying the box. Robots can choose to also drop boxes at locations, but they nevet do because it is not optimal.

The way I modeled the contents of boxes, it is easy to add new kinds of componenents, like 'parts' in the problem defined. Also it is possible to add other robots that can pick up other boxes. Altough this produces a much longer plan searching time if we use astar to find the optimal plan. Observation about plans found, since we don't need boxes to be returned to the central_warehouse, the longest delivery is always performed last.


PROBLEM2
Assumptions about problem2:
- there are different kind of robots, the basic one which walks and can move obly between adjacent locations, and drones that can fly between arbitrary locations, maybe also some kind of jumping robot that can move by 2 locations at a time (walker, drone, jumper)
- carriers can be dropped at locations and not at workstations
- to load content to boxes the box has to be loaded in a carrier and the carrier must be attached, to load a box to a carrier the carrier must be attached and must have capacity available
- the carriers have a maximum capacity, up to 10 boxes
- a robot can have only one carrier attached at a time
- like before, contents are available with infinite restock at the central_warehouse

For the different kind of robots, I am planning to give the drone the highest cost for moving, the jumping robot should have less than double the cost of the walking robot so that it makes sense. I think this creates an interesting solution in cetrain environments, especially because the jumper cannot reach all the states, but only those with an even distance to the central_warehouse.

Because of the problem of the fluents/numeric-fluents not being implemented I had to change the way the max capacity for carriers is handled, the solution this way is far from clean and pretty meh but it works.

Interesting about the solution, only the drone makes actions, since it is the fastest way to move and since it spends the action to attach the carrier, any other robot starting from the central_warehouse would take the same amount of time to reach any new destination because it needs to attach the carrier before. Also, the drone attaches the carrier with capacity two in order to make only one trip to deliver the contents to the two workstations in location 2.


PROBLEM3
Tasks:

- Implemented the task (move ?r ?l) that allows the three different types of robots to move to a certain location. The method for when the robot is already at location is the same for all three, while other methods differ. The walker needs 2 methods to make sure it reaches the destination, the jumper same thing but with way more location needed in the specification, while the drone just needs one method since it can reach any location in one action.

- To get a carrier (get_carrier ?r ?car), if a robot has one attached already, it will detach it in the location it is in before moving to the location of the new carrier. Also, before moving to attach a carrier in another location, it checks whether the carrier wanted is already attached. If the carrier wanted is already attached to another robot, then it forces the other robot to detach the carrier before acting on the task.
    - if carrier already attached then nothing
    - if robot attached to other carrier else then detach other carrier
    - if carrier attached to other robot then detach carrier from that robot
    - if carrier in same location of robot then attach it
    - if carrier in another location then move robot to that location and attach carrier

- 




- I do not allow bots to pick up content, only at the central warehouse, not at any other workstations
- if I need to put down content (i dont' see why but ok) the robots will always drop the content at cw
- but I assume carriers empty or full and boxes empty of full can be found at any location

To deliver some content, I need a robot to attach a carrier, load a box, go to central_warehouse, pick_up_content_at_cw, go to the location and put down to the workstation. Ideally, if the robot already has a carrier attached with a box with the correct content and is already at location then there should be prior actions performed to the putdown.

- obtain carrier (can already have, or move to location with carrier and attach it)
- obtain empty box (can already have empty loaded, or need to empty it at cw?, or move to location with empty box and load it and here i need   to check if there is capacity in the carrier)
- obtain content (should load it at cw and need to move there, or can already be in a box loaded in the carrier)
- move to location for delivery
- put down conent at workstation, cannot check whether the content is already there since i can have multiple